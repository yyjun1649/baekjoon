/*
 * @version 2021년도 1월
 * @author 윤영준
 * <입력>
 * 첫 줄에 테스트케이스의 수가 주어진다. 각 테스트케이스는 두 줄로 이루어져 있다.
 * 테스트케이스의 첫 번째 줄에는 문서의 개수 N(1 ≤ N ≤ 100)과, 몇 번째로 인쇄되었는지 궁금한 문서가 현재 Queue에서 몇 번째에 놓여 있는지를 나타내는 정수 M(0 ≤ M < N)이 주어진다. 
 * 이때 맨 왼쪽은 0번째라고 하자. 두 번째 줄에는 N개 문서의 중요도가 차례대로 주어진다. 중요도는 1 이상 9 이하의 정수이고, 중요도가 같은 문서가 여러 개 있을 수도 있다.
 * <출력>
 * 각 테스트 케이스에 대해 문서가 몇 번째로 인쇄되는지 출력한다.
 */
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int T = Integer.parseInt(br.readLine());

		for (int i = 0; i < T; i++) {
			Queue<A> q = new LinkedList<>();
			st = new StringTokenizer(br.readLine());
			int M = Integer.parseInt(st.nextToken()); // 개수
			int N = Integer.parseInt(st.nextToken()); // 찾을 수의 처음 위치
			st = new StringTokenizer(br.readLine()); // 중요도
			int count = 0;

			for (int j = 0; j < M; j++) {
				q.offer(new A(j, Integer.parseInt(st.nextToken())));
			}

			while (!q.isEmpty()) {
				int max = 0;

				for (int z = 0; z < q.size(); z++) {
					if (max <= q.peek().important)
						max = q.peek().important;
					q.offer(q.poll());
				} // max찾기위해 1회전

				while (q.peek().important != max) {
					q.offer(q.poll());
				}
				count++;

				if (q.peek().order == N) {
					break;

				}
				q.poll();
			}
			System.out.println(count);
		}

	}
}

class A {
	int order;
	int important;

	public A(int order, int important) {
		this.order = order;
		this.important = important;
	}
}
