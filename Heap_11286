/*
 * @version 2021년도 1월
 * @author 윤영준
 * <입력>
 * 첫째 줄에 연산의 개수 N(1≤N≤100,000)이 주어진다.
 * 다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 만약 x가 0이 아니라면 배열에 x라는 값을 넣는(추가하는) 연산이고,
 * x가 0이라면 배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 배열에서 제거하는 경우이다. 입력되는 정수는 -231보다 크고, 231보다 작다.
 * <출력>
 * 입력에서 0이 주어진 회수만큼 답을 출력한다. 만약 배열이 비어 있는 경우인데 절댓값이 가장 작은 값을 출력하라고 한 경우에는 0을 출력하면 된다.
 */
 
 import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;


public class Main {

	public static void main(String[] args)  {
		PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() { // 절댓값 힙을 사용하기위해 Comparator api 사용 ( Comparator 은 Objects 클래스 내 객체비교할때 사용됨)
			public int compare(Integer o1 , Integer o2) {                             // 예를들어 compare(T a,T b) 일때 a가 b보다 작으면 음수, 같으면 0 크면 양수를 리턴한다.
				if(Math.abs(o1) == Math.abs(o2))
					return o1 - o2;
				else
					return Math.abs(o1) - Math.abs(o2);
			}
		});
		
		Scanner in = new Scanner(System.in);

		int N = in.nextInt(), value;

		for (int i = 0; i < N; i++) {
			value = in.nextInt();

			if (value == 0) {
				if (pq.size() == 0)
					System.out.println("0");
				else
					System.out.println(pq.poll());
			} else
				pq.offer(value);

		}

	}
}
